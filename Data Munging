#### get data from web

download.file("https://www.aemo.com.au/aemo/data/nem/priceanddemand/PRICE_AND_DEMAND_202009_NSW1.csv")
data<-read_csv("PRICE_AND_DEMAND_202009_NSW1.csv")
data

#### get data from html
library(rvest)

html<-read_html("https://finance.yahoo.com/quote/AAPL/analysis?p=AAPL")
tab<-html_table(html)
print(tab)

#######selected and filter data
library(tidyverse)
str(diamonds)

selected1<-select (diamonds, carat, cut, price)
selected2<-select(diamonds, -carat, -cut, -price)

filter(diamonds, (price>1000))

##"&"= and
filter(diamonds, (price>1000)&(cut=="Ideal"))

##"|"= or
filter(diamonds, (cut=="Ideal")|(color=="E"))

filter(diamonds, (cut %in% c("Ideal","Fair")))

##equal
filter(diamonds, (cut=="Fair") | (cut=="Ideal"))

filter(diamonds, !(cut %in% c("Ideal","Fair")))

###mutate() adds new variables and preserves existing ones; 
###transmute() adds new variables and drops existing ones. 

mpgsel<-select(mpg,cty,hwy)
mpgMet<-mutate(mpgsel,ctyMetric=0.425144*cty,hwyMetric=0.425144*hwy)
mpgMet

###
c(1,12,4)%>%
  mean%>%
  sqrt->out

mpgsel<-select(mpg,cty,hwy)
mpgMet<-mutate(mpgsel,ctyMetric=0.425144*cty,hwyMetric=0.425144*hwy)
mpgMet

select(mpg,cty,hwy)%>%
  mutate(ctyMetric=0.425144*cty,hwyMetric=0.425144*hwy)->mpgMet
mpgMet

### summarise data
library(tidyverse)

txhousing%>%
  group_by(year)%>%
  summarise(totalsales=sum(sales,na.rm = TRUE))->totsales
totsales

txhousing%>%
  group_by(year,city)%>%
  summarise(totalsales=sum(sales,na.rm = TRUE))->totsales2
totsales2

##reshaping and joining data

library(tidyverse)

## use wide to reshaping

ggplot(economics, aes(x=uempmed,y=psavert))+
  geom_point()
economics

##use long to reshaping

economics_long
ggplot(economics_long, aes(x=date,y=value))+
  geom_line()+
  facet_wrap(~variable, scales = "free_y")

##from wide to long

pivot_longer(economics,cols = -date,
             names_to = "variable",
             values_to = "value")->long

long

##from long to wide
economics_long%>%
  pivot_wider(id_cols = date,
              names_from=variable,
              values_from=value)->wide

wide

##combine two data frame---joined data

energy<-read_csv("energydata.csv")
energy

weather<-read_csv("weather.csv")
weather

##joining by=c("Date","State")
##inner_join(x,y)--return all rows from x with matching values in y.

all_data1<-inner_join(energy,weather)
all_data1

##left_join(x,y)--return all rows from x with matching values in y, with NA if there no match

all_data2<-left_join(energy,weather)
all_data2

##right_join(x,y)--return all rows from y with matching values in x, with NA if there no match

all_data3<-right_join(energy,weather)
all_data3

##full_join(x,y)--return all rows from x or y, with NA if there no match

all_data4<-full_join(energy,weather)
all_data4


############

swissef<-read.csv("SwissExportsFull.csv")

## long,wide 转换
pivot_longer(swissef, cols =c( -Date,-Year),
             names_to = "Country",
             values_to = "value")->long
long

long%>% 
  group_by(Year,Country)%>%
  summarise(YearlyExports=sum(value))->SwissYearly

SwissYearly

##filter 筛选所有year==1988和2018的数据
SwissYearly%>%
  filter(Year %in% c(1988,2018))%>% #Filter years
  pivot_wider(id_cols = Country,
              names_from = Year,
              values_from = YearlyExports)-> #Need to widen
  
SwissYearlyWide

## 画图
SwissYearlyWide%>%
  ggplot(aes(x=`1988`,y=`2018`))+
  geom_point()+
  scale_x_log10()+scale_y_log10()

##filter 筛选不等于零的数据

SwissYearlyWide%>%
  filter((`1988`!=0)&(`2018`!=0))%>% #Filter years
  ggplot(aes(x=`1988`,y=`2018`))+
  geom_point()+
  scale_x_log10()+scale_y_log10()


apple<-read.csv("apple_options.csv")

##gsub替换（原数，替换，目标）
gsub('%','','25%')%>%as.numeric()/100

gsub('%','','1.32%')%>%as.numeric()/100

##将百分数换成小数
apple%>%
  mutate(ImpliedVol=gsub('%','',`Implied.volatility`)%>%as.numeric()/100)

## find the expiry date（group by） that has the most put options (filter).
apple%>%
  filter(Type=='Put')%>%
  group_by(`Expiry.date`)%>%
  summarise(TotalOptions=n())

apple%>%
  mutate(ImpliedVol=gsub('%','',`Implied.volatility`)%>%as.numeric()/100)%>%
  filter(Type=='Put',Strike.Price>250,`Expiry.date`=='2020-05-29')

## find the median value of Implied Volatility(summarise) for each Strike Price (group by).
apple%>%
  mutate(ImpliedVol=gsub('%','',`Implied.volatility`)%>%as.numeric()/100)%>%
  filter(Type=='Put',Strike.Price>250,`Expiry.date`=='2020-05-29')%>%
  group_by(Strike.Price)%>%
  summarise(MedIV=median(ImpliedVol,na.rm = T))

apple%>%
  mutate(ImpliedVol=gsub('%','',`Implied.volatility`)%>%as.numeric()/100)%>%
  filter(Type=='Put',`Expiry.date`=='2020-05-29',`Strike.Price`>250)%>%
  group_by(`Strike.Price`)%>%
  summarise(MedIV=median(`ImpliedVol`,na.rm = T))%>%
  ggplot(aes(x=`Strike.Price`,y=MedIV))+geom_line()


##
library(rvest)

url<-'https://au.finance.yahoo.com/quote/AAPL/options?strike=180&straddle=false'

url%>%
  read_html%>%
  html_table()->data

##A better database would store these as two separate variables.
## Another point worth mentioning is that even the variable name might not be considered to be atomic. 
## For example in some contexts it may be important to serparate family name from given names


