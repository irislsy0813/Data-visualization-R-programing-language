library(class)

load('knnexample.RData')

###数据整理成一样的scale

train_x

train_x_std<-scale(train_x)

mean_train_x<-attr(train_x_std,"scaled:center")
std_train_x<-attr(train_x_std,"scaled:scale")

###test数据整理
test_x_std<-scale(test_x,
                  center=mean_train_x,
                  scale = std_train_x)

##假设k=1用算出knn的预测结果yhat
knn(train_x_std,test_x_std,train_y,k=1) ->yhat_k1
print(yhat_k1)

##错误分类概率（misclassification）当test_y!=yhat_k1

miscl_k1<-mean(test_y!=yhat_k1)

print(miscl_k1)

##假设k=5用算出knn的预测结果yhat

knn(train_x_std,test_x_std,train_y,k=5) ->yhat_k5
print(yhat_k5)

miscl_k5<-mean(test_y!=yhat_k5)

print(miscl_k5)

##Sensitivity and specificity，Letting "default" be the "positive" class
##sensitivity is 8/(8+52) or 0.133, and specificity is 169/(21+169) or 0.889
table(test_y,yhat_k5)

##add probabilities in knn

knn(train_x_std, test_x_std,
    train_y,k=5,prob = TRUE)->prob_k5 ##此时结果包含文字和概率

##仅提取概率
head(attr(prob_k5,"prob"),10) ##前十个

print(attr(prob_k5,"prob")) ##所有


##########################练习

rm(list=ls())

##Q1 Carry out kNN classification using all data in ExistingWines.rds in the training set andpredict the data in NewWines.rds. Let k = 1

#Use tidyverse
library(dplyr)
library(class)

#Load in data
ExistingWines<-readRDS('ExistingWines.rds')

#Split x and y variables and standardise

old_x<-select(ExistingWines,-BestMarket)%>%scale() ##train x

#Keep mean and standard deviation

mean_old_x<-attr(old_x,"scaled:center")
std_old_x<-attr(old_x,"scaled:scale")

old_y<-pull(ExistingWines,BestMarket) ##train y

#Load in New Wine Data
new_x<-readRDS('NewWines.rds')%>%
  scale(center = mean_old_x,scale = std_old_x)  ##test x

  yhat_k1<-knn(old_x,new_x,old_y,k=1)

## Q2 What are the predictions for the first ten wines in the NewWines.rds
#The first ten predictions can be checked using the head function

head(yhat_k1,10)

#Q3 Repeat the analyis with k = 5
#Same code as before different k argument

yhat_k5<-knn(old_x,new_x,old_y,k=5)
head(yhat_k5,10)

# Q4 What are the predicted probabilities for the first ten wines in the NewWines.rds when k=5
#Same as before but set prob to T

yhat_k5<-knn(old_x,new_x,old_y,k=5,prob = T)
#Use attr function to get probabilities

head(attr(yhat_k5,"prob"),10)

#Split the data in ExistingWines.rds into a training sample (of roughly 70%) and a test sample (of roughly 30%). 
#Create an indicator that determines whether it is training or test sample.

ind<-ifelse(runif(125)<0.7,"Training Sample","Test Sample")

train_y<-old_y[ind=="Training Sample"]
test_y<-old_y[ind=="Test Sample"]
train_x<-old_x[ind=="Training Sample",]
test_x<-old_x[ind=="Test Sample",]


#Is k = 1 a better choice than k = 5 according to the misclassification rate?
yhat_k1<-knn(train_x,test_x,train_y,k=1)
mean(yhat_k1!=test_y)

yhat_k5<-knn(train_x,test_x,train_y,k=5)
mean(yhat_k5!=test_y)

###############################################

#Use tidyverse

library(dplyr)
library(class)

#Load in data

ExistingWines<-readRDS('ExistingWines.rds')

#Split x and y variables and standardise

train_x<-select(ExistingWines,-BestMarket)

##标准化数据
old_x<-scale(train_x)  ------train_x

#Keep mean and standard deviation

mean_old_x<-attr(old_x,"scaled:center")

std_old_x<-attr(old_x,"scaled:scale")

old_y<-pull(ExistingWines,BestMarket) ------train_y

#Load in New Wine Data

new_x<-readRDS('NewWines.rds')%>%  

scale(center = mean_old_x,scale = std_old_x)  ------test_x

yhat_k1<-knn(old_x,new_x,old_y,k=1)

head(yhat_k1,10)

#Same code as before different k argument

yhat_k5<-knn(old_x,new_x,old_y,k=5)
head(yhat_k5,10)

#Same as before but set prob to T   计算概率

yhat_k5<-knn(old_x,new_x,old_y,k=5,prob = T)

#Use attr function to get probabilities 得到概率

head(attr(yhat_k5,"prob"),10)

#Create an indicator that determines whether it is training or test sample. 自主创建training 和 test

ind<-ifelse(runif(125)<0.7,"Training Sample","Test Sample")

train_y<-old_y[ind=="Training Sample"]
test_y<-old_y[ind=="Test Sample"]
train_x<-old_x[ind=="Training Sample",]
test_x<-old_x[ind=="Test Sample",]

yhat_k1<-knn(train_x,test_x,train_y,k=1)
mean(yhat_k1!=test_y)

yhat_k5<-knn(train_x,test_x,train_y,k=5)
mean(yhat_k5!=test_y)



